import { inject, Module } from "langium";
import {
    createDefaultModule,
    createDefaultSharedModule,
    DefaultSharedModuleContext,
    LangiumServices,
    LangiumSharedServices,
    PartialLangiumServices,
} from "langium/lsp";
import { DeclValidator } from "./decl-validator.js";
import { ErrorMessageProvider } from "./error-message-provider.js";
import { SysyFormattingService } from "./formatting-provider.js";
import { FuncValidator } from "./funcl-validator.js";
import {
    HelloWorldGeneratedModule,
    HelloWorldGeneratedSharedModule,
} from "./generated/module.js";
import {
    HelloWorldValidator,
    registerValidationChecks,
} from "./hello-world-validator.js";
import { SysyHoverProvider } from "./hover-provider.js";
import { SysyQuickFixProvider } from "./quickfix-provider.js";
import { SysyRefactorProvider } from "./refactor-provider.js";
import { SysyRenameProvider } from "./rename-provider.js";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type HelloWorldAddedServices = {
  validation: {
    HelloWorldValidator: HelloWorldValidator;
    DeclValidator: DeclValidator;
    FuncValidator: FuncValidator;
    ErrorMessageProvider: ErrorMessageProvider;
  };
  lsp: {
    RenameProvider?: SysyRenameProvider;
    RefactorProvider: SysyRefactorProvider;
    QuickFixProvider: SysyQuickFixProvider;
    HoverProvider: SysyHoverProvider;
    FormattingProvider: SysyFormattingService;
  };
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type HelloWorldServices = LangiumServices & HelloWorldAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const HelloWorldModule: Module<
  HelloWorldServices,
  PartialLangiumServices & HelloWorldAddedServices
> = {
  validation: {
    HelloWorldValidator: () => new HelloWorldValidator(),
    DeclValidator: (services: HelloWorldServices) =>
      new DeclValidator(services),
    FuncValidator: (services: HelloWorldServices) =>
      new FuncValidator(services),
    ErrorMessageProvider: () => new ErrorMessageProvider(),
  },
  lsp: {
    // 注释掉有问题的 RenameProvider，暂时不注册这个服务
    // RenameProvider: (_services: HelloWorldServices) => new SysyRenameProvider(),
    RefactorProvider: (services: HelloWorldServices) =>
      new SysyRefactorProvider(services),
    QuickFixProvider: (services: HelloWorldServices) =>
      new SysyQuickFixProvider(services),
    HoverProvider: (services: HelloWorldServices) =>
      new SysyHoverProvider(services),
    FormattingProvider: (services: HelloWorldServices) =>
      new SysyFormattingService(services),
  },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createHelloWorldServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  HelloWorld: HelloWorldServices;
} {
  const shared = inject(
    createDefaultSharedModule(context),
    HelloWorldGeneratedSharedModule
  );
  const HelloWorld = inject(
    createDefaultModule({ shared }),
    HelloWorldGeneratedModule,
    HelloWorldModule
  );
  shared.ServiceRegistry.register(HelloWorld);
  registerValidationChecks(HelloWorld);

  return { shared, HelloWorld };
}
